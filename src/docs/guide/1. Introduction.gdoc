This plugin makes it easy to intermix groovy and javascript code similar to rjs templates in rails if you
are familiar with rails. Infact the plugin provides no abstraction from javascript and you can use the same
javascript syntax to generate client executable code with some insertions from server side.

h3. Installation

To install run

grails install-plugin http://grails-javascript.googlecode.com/files/grails-javascript-0.2.zip

in your project directory.

h3. Demo Application

A demo application has been developed to show case grails-javascript plugin. The application can be downloaded
from http://grails-javascript.googlecode.com/files/javascript-demo-0.2.zip .

h3. Usage

The plugin can be used as a Converter, Codec or with a controller helper method.

*Converter*

You can use Javascript converter on any closure objects.
{code}
import grails.converters.Javascript

def error = {
    if( request.js ){
        render( {
            jQuery("#error").html("There was an error processing your request. ${e.toString}");
        } as Javascript)
        return null
    }
}
{code}

Renders as follows
{code}
jQuery("#error").html("There was an error processing your request. Connection refused.");
{code}

Or if you like $ syntax
{code}
import grails.converters.Javascript

def error = {
    if( request.js ){
        render( {jq ->
            jq("#error").html("There was an error processing your request. ${e.toString}");
        } as jQuery)
        return null
    }
}
{code}
Renders as follows
{code}
$("#error").html("There was an error processing your request. Connection refused.");
{code}


*Codec*


You can use the codec on an closure similar to converter.
{code}
render {jq ->
   jq("#error").html("There was an error processing your request. ${e.toString}");
}.encodeAsJs()
{code}



*Controller helper*

Controller helper method is named as jsRender and you can pass in a closure to generate javascript similar
to methods above.

{code}
jsRender {jq ->
   jq("#error").html("There was an error processing your request. ${e.toString}");
}
{code}

{note}
For 0.1 version users, Jquery converter, codec and helper is now obselete. $ syntax is now applicable everywhere.
{note}