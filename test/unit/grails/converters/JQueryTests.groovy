package grails.converters

import grails.test.*
import mobi.econceptions.js.json.JsMarshaller
import org.codehaus.groovy.grails.web.converters.ConverterUtil

import mobi.econceptions.js.JsConfig

import mobi.econceptions.js.handlers.config.HandlerConfigurationInitializer


class JQueryTests extends GrailsUnitTestCase {
	Javascript js ;
    protected void setUp() {
        super.setUp()
	    JSON.registerObjectMarshaller(new JsMarshaller() , 100)
	    js = new Javascript();
	    JsConfig.debug = true;
	    //BasicConfigurator.configure()

		//LogManager.rootLogger.level = Level.DEBUG;
	    //LogManager.getLogger("mobi.econceptions").level = Level.INFO
		HandlerConfigurationInitializer.init( true )
	    Closure.metaClass.asType = { Class z ->
		    ConverterUtil.createConverter( z , delegate )
	    }
    }
	private void executeAndTestAsType(String expected, Closure c){
		expected = expected.replaceAll(/\s+|\t|\r|\n/,"").replaceAll(/@/," ")
		def ret = c.encodeAsJavascript();
		assertEquals expected, ret.toString()
	}
	private void executeAndTestAsCodec(String expected , Closure c){
		expected = expected.replaceAll(/\s+|\t|\r|\n/,"").replaceAll(/@/," ")
		def ret = c as Javascript
		
		assertEquals expected, ret.toString()
	}
	private void executeAndRender( String expected , Closure c){
		expected = expected.replaceAll(/\s+|\t|\r|\n/,"").replaceAll(/@/," ")

		js.setTarget( c);
		def ret =js.toString();

		println( expected )
		println( ret )
		assertEquals expected, ret
	}
    protected void tearDown() {
        super.tearDown()
    }

    void testDollarCall() {
	    String expected ="""
	    \$("#id").html("<span>Hello<\\/span>");
	    """
		executeAndRender( expected ){ jq ->
			jq("#id").html("<span>Hello</span>")
		}
    }
	void testDollarProperty(){
		String expected = """
		\$.ajax({});
		\$.ajax = 1;
		"""
		Closure c = { jq ->
			jq.ajax([:])
			jq.ajax = 1
		}
		executeAndRender expected,c
		executeAndTestAsType( expected , c )
		executeAndTestAsCodec( expected , c )
	}
	/**
	 * Manual examples
	 * Simple data replacement in dom.
	 */
	void testExamples201(){
		String expected = """
		\$("#message").html("Update@successful.");
			\$("#main").html( "templatedata");
		
		"""
		executeAndRender expected,{ jq ->
            jq("#message").html("Update successful.")
			jq("#main").html( "templatedata")
		}
	}
	/**
	 * Simple property assignment.
	 */
	void testExample202(){
		String expected = """
		var@a;
		a = 1;
		window.location.href="http://www.yahoo.com";

		"""
		executeAndRender expected,{ jq ->
            var a
			a=1
			window.location.href="http://www.yahoo.com"
		}
	}
	/**
	 * Using this object
	 */
	void testExample203(){
		String expected = """
		\$(".remote").click( function(){
			var@url;
			url = \$(this).attr("href");
			\$.script(url);
		});


		"""
		executeAndRender expected,{ jq ->
			jq(".remote").click( function(){
				var url
				url = jq(This).attr("href")
				jq.script( url )
			});
		}
	}
	/**
	 * Function defintion, Map passing 
	 */
	void testExample204(){
		String expected = """
		\$(".remote").unbind().click( function(){
			ele = \$(this);
			\$.ajax({
				"url":ele.attr("href"),
				"dataType":"script",
				"method":"POST"
			});
		});
		"""
		executeAndRender expected,{ jq ->
            jq(".remote").unbind().click( function(){ j ->
	            ele = j(This);
	            j.ajax([
	                    url:ele.attr("href"),
			            dataType:"script",
			            method:"POST"
	            ])
            });
		}
	}
	/**
	 * Operators and datatype conversions.
	 * Operators only work when the first operand is a variable.
	 * Operator overloading may have unexpected results. Make sure the first argument to an operator is a variable.
	 * For disambiguation use () as much as possible.
	 */
	void testExample205(){
		String expected = """
		a = (c+1);
		d = (q * 2);
		r = (s + "abcd");
		a = ((-b) + 1);
		c = ((+q) -1);
		a = (b^c);
		a = (((b&c)*2)+1);
		a =(b|c);
		q = [ 1,2,3,4];
		p = {"a":1,"b":2};
		q = (~n);
		"""
		executeAndRender expected,{ jq ->
            a = c+1
			d = q*2
			r = s+"abcd"
			a = -b + 1
			c=+q -1
			a = b ^ c
			a = (b & c)* 2 + 1
			a = b | c
			q = [1,2,3,4]
			p = [ a:1, b:2]
			q = ~n
		}
	}
	/**
	 * Asis Method
	 * For content which cannot be generated by this plugin.
	 */
	void testExamples206(){
		String expected = """
		i=0;
		while( i < 10){
		i = (i+1);
		}
		ele = "ele";
		for( var@q=0; q < 10; q++){
			\$(( ele + q) ).html("");
		}
		"""
		executeAndRender expected,{ jq ->
			i = 0
            asis("while(i<10){")
			i=i+1
			asis("}")
			ele = "ele"
			asis("for(var q=0;q<10;q++){")
				jq( ele + q ).html("")
			asis("}")
		}
	}
	/**
	 * Function Definitions
	 */
	public void testExamples207(){
		String expected = """
		function(a,b){
			\$.me=1;
			function(c,d){
				\$.you=1;
				function(d,e){
					\$.hell();
				};
			};
		};
		function@replace( sourceElement , targetElement){
				\$(targetElement).html( \$(sourceElement).html() );
			};

		"""
		executeAndRender expected,{ jq ->
            function(a,b){
	            jq.me = 1
	            function(c,d){
		            jq.you=1
		            function(d,e){
			            jq.hell()
		            }
	            }
            }
			function replace( sourceElement , targetElement){
				jq(targetElement).html( jq(sourceElement).html() )
			}
		}

	}
	/**
	 * Function Definitions
	 */
	public void testExamples208(){
		String expected = """
		\$(document).ready( function(){
				\$(".remote").click( function(){
					var@url;
					url = \$(this).attr("href");
					\$.ajax({
					        "url":url,
							"method":"POST",
							"dataType":"script",
							"onError":function(){
								alert("Server@Error.");
							}
					});
				});
			});
		"""
		executeAndRender expected,{ jq ->
			jq(document).ready( function(){
				jq(".remote").click( function(){
					var url
					url = jq(This).attr("href");
					jq.ajax([
					        url:url,
							method:"POST",
							dataType:"script",
							onError:function(){
								alert("Server Error.")
							}
					]);
				});
			});
		}

	}
}
